import { Injectable, InjectionToken, Optional, Inject } from '@angular/core';
import { Subject, BehaviorSubject } from 'rxjs';
import * as i0 from "@angular/core";
export const EDITOR_SETTINGS = new InjectionToken('EDITOR_SETTINGS');
export class CodeEditorService {
    /**
     * Returns the global `monaco` instance
     */
    get monaco() {
        return this._monaco;
    }
    constructor(settings) {
        this.typingsLoaded = new Subject();
        this.loaded = new BehaviorSubject({ monaco: null });
        this.loadingTypings = new BehaviorSubject(false);
        const editorVersion = settings?.editorVersion || 'latest';
        this.baseUrl =
            settings?.baseUrl ||
                `https://cdn.jsdelivr.net/npm/monaco-editor@${editorVersion}/min`;
        this.typingsWorkerUrl = settings?.typingsWorkerUrl || ``;
    }
    loadTypingsWorker() {
        if (!this.typingsWorker && window.Worker) {
            if (this.typingsWorkerUrl.startsWith('http')) {
                const proxyScript = `importScripts('${this.typingsWorkerUrl}');`;
                const proxy = URL.createObjectURL(new Blob([proxyScript], { type: 'text/javascript' }));
                this.typingsWorker = new Worker(proxy);
            }
            else {
                this.typingsWorker = new Worker(this.typingsWorkerUrl);
            }
            this.typingsWorker.addEventListener('message', (e) => {
                this.loadingTypings.next(false);
                this.typingsLoaded.next(e.data);
            });
        }
        return this.typingsWorker;
    }
    loadTypings(dependencies) {
        if (dependencies && dependencies.length > 0) {
            const worker = this.loadTypingsWorker();
            if (worker) {
                this.loadingTypings.next(true);
                worker.postMessage({
                    dependencies
                });
            }
        }
    }
    loadEditor() {
        return new Promise((resolve) => {
            const onGotAmdLoader = () => {
                window.require.config({
                    paths: { vs: `${this.baseUrl}/vs` }
                });
                if (this.baseUrl.startsWith('http')) {
                    const proxyScript = `
            self.MonacoEnvironment = {
              baseUrl: "${this.baseUrl}"
            };
            importScripts('${this.baseUrl}/vs/base/worker/workerMain.js');
          `;
                    const proxy = URL.createObjectURL(new Blob([proxyScript], { type: 'text/javascript' }));
                    window['MonacoEnvironment'] = {
                        getWorkerUrl: function () {
                            return proxy;
                        }
                    };
                }
                window.require(['vs/editor/editor.main'], () => {
                    this._monaco = window['monaco'];
                    this.loaded.next({ monaco: this._monaco });
                    resolve();
                });
            };
            if (!window.require) {
                const loaderScript = document.createElement('script');
                loaderScript.type = 'text/javascript';
                loaderScript.src = `${this.baseUrl}/vs/loader.js`;
                loaderScript.addEventListener('load', onGotAmdLoader);
                document.body.appendChild(loaderScript);
            }
            else {
                onGotAmdLoader();
            }
        });
    }
    /**
     * Switches to a theme.
     * @param themeName name of the theme
     */
    setTheme(themeName) {
        this.monaco.editor.setTheme(themeName);
    }
    createEditor(containerElement, options) {
        return this.monaco.editor.create(containerElement, options);
    }
    createModel(value, language, uri) {
        return this.monaco.editor.createModel(value, language, this.monaco.Uri.file(uri));
    }
    setModelLanguage(model, mimeTypeOrLanguageId) {
        if (this.monaco && model) {
            this.monaco.editor.setModelLanguage(model, mimeTypeOrLanguageId);
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.10", ngImport: i0, type: CodeEditorService, deps: [{ token: EDITOR_SETTINGS, optional: true }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.10", ngImport: i0, type: CodeEditorService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.10", ngImport: i0, type: CodeEditorService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: () => [{ type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [EDITOR_SETTINGS]
                }] }] });
//# sourceMappingURL=data:application/json;base64,