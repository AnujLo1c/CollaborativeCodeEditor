import { Component, ChangeDetectionStrategy, ViewEncapsulation, ViewChild, Input, Output, EventEmitter, HostListener, inject } from '@angular/core';
import { CodeEditorService } from '../services/code-editor.service';
import { TypescriptDefaultsService } from '../services/typescript-defaults.service';
import { JavascriptDefaultsService } from '../services/javascript-defaults.service';
import { JsonDefaultsService } from '../services/json-defaults.service';
import * as i0 from "@angular/core";
export class CodeEditorComponent {
    constructor() {
        // private _value = '';
        this.defaultOptions = {
            lineNumbers: 'on',
            contextmenu: false,
            minimap: {
                enabled: false
            }
        };
        // @Input()
        // set value(v: string) {
        //   if (v !== this._value) {
        //     this._value = v;
        //     this.setEditorValue(v);
        //     this.valueChanged.emit(v);
        //   }
        // }
        // get value(): string {
        //   return this._value;
        // }
        /**
         * Editor theme. Defaults to `vs`.
         *
         * Allowed values: `vs`, `vs-dark` or `hc-black`.
         * @memberof CodeEditorComponent
         */
        this.theme = 'vs';
        /**
         * Editor options.
         *
         * See https://microsoft.github.io/monaco-editor/docs.html#interfaces/editor.IStandaloneEditorConstructionOptions.html for more details.
         *
         * @memberof CodeEditorComponent
         */
        this.options = {};
        /**
         * Toggle readonly state of the editor.
         *
         * @memberof CodeEditorComponent
         */
        this.readOnly = false;
        /**
         * An event emitted when the text content of the model have changed.
         */
        this.valueChanged = new EventEmitter();
        /**
         * An event emitted when the code model value is changed.
         */
        this.codeModelChanged = new EventEmitter();
        /**
         * An event emitted when the contents of the underlying editor model have changed.
         */
        this.modelContentChanged = new EventEmitter();
        /**
         * Raised when editor finished loading all its components.
         */
        this.loaded = new EventEmitter();
        this.editorService = inject(CodeEditorService);
        this.typescriptDefaults = inject(TypescriptDefaultsService);
        this.javascriptDefaults = inject(JavascriptDefaultsService);
        this.jsonDefaults = inject(JsonDefaultsService);
    }
    /**
     * The instance of the editor.
     */
    get editor() {
        return this._editor;
    }
    set editor(value) {
        this._editor = value;
    }
    ngOnDestroy() {
        if (this.editor) {
            this.editor.dispose();
            this.editor = null;
        }
        if (this._model) {
            this._model.dispose();
            this._model = null;
        }
    }
    ngOnChanges(changes) {
        const codeModel = changes['codeModel'];
        const readOnly = changes['readOnly'];
        const theme = changes['theme'];
        if (codeModel && !codeModel.firstChange) {
            this.updateModel(codeModel.currentValue);
        }
        if (readOnly && !readOnly.firstChange) {
            if (this.editor) {
                this.editor.updateOptions({
                    readOnly: readOnly.currentValue
                });
            }
        }
        if (theme && !theme.firstChange) {
            this.editorService.setTheme(theme.currentValue);
        }
    }
    onResize() {
        if (this.editor) {
            this.editor.layout();
        }
    }
    async ngAfterViewInit() {
        this.setupEditor();
        this.loaded.emit(this);
    }
    setupEditor() {
        const domElement = this.editorContent.nativeElement;
        const settings = {
            value: '',
            language: 'text',
            uri: `code-${Date.now()}`,
            ...this.codeModel
        };
        this._model = this.editorService.createModel(settings.value, settings.language, settings.uri);
        const options = Object.assign({}, this.defaultOptions, this.options, {
            readOnly: this.readOnly,
            theme: this.theme,
            model: this._model
        });
        this.editor = this.editorService.createEditor(domElement, options);
        this._model.onDidChangeContent((e) => {
            this.modelContentChanged.emit(e);
            const newValue = this._model.getValue();
            if (this.codeModel) {
                this.codeModel.value = newValue;
            }
            this.valueChanged.emit(newValue);
        });
        this.setupDependencies(this.codeModel);
        this.codeModelChanged.emit({ sender: this, value: this.codeModel });
    }
    runEditorAction(id, args) {
        this.editor.getAction(id)?.run(args);
    }
    formatDocument() {
        this.runEditorAction('editor.action.formatDocument');
    }
    setupDependencies(model) {
        if (!model) {
            return;
        }
        const { language } = model;
        if (language) {
            const lang = language.toLowerCase();
            switch (lang) {
                case 'typescript':
                    if (model.dependencies) {
                        this.editorService.loadTypings(model.dependencies);
                    }
                    break;
                case 'javascript':
                    if (model.dependencies) {
                        this.editorService.loadTypings(model.dependencies);
                    }
                    break;
                case 'json':
                    if (model.schemas) {
                        this.jsonDefaults.addSchemas(model.uri, model.schemas);
                    }
                    break;
                default:
                    break;
            }
        }
    }
    setEditorValue(value) {
        // Fix for value change while dispose in process.
        setTimeout(() => {
            if (this._model) {
                this._model.setValue(value);
            }
        });
    }
    updateModel(model) {
        if (model) {
            this.setEditorValue(model.value);
            this.editorService.setModelLanguage(this._model, model.language);
            this.setupDependencies(model);
            this.codeModelChanged.emit({ sender: this, value: model });
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.10", ngImport: i0, type: CodeEditorComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "18.2.10", type: CodeEditorComponent, isStandalone: true, selector: "ngs-code-editor", inputs: { codeModel: "codeModel", theme: "theme", options: "options", readOnly: "readOnly" }, outputs: { valueChanged: "valueChanged", codeModelChanged: "codeModelChanged", modelContentChanged: "modelContentChanged", loaded: "loaded" }, host: { listeners: { "window:resize": "onResize()" }, classAttribute: "ngs-code-editor" }, viewQueries: [{ propertyName: "editorContent", first: true, predicate: ["editor"], descendants: true, static: true }], usesOnChanges: true, ngImport: i0, template: "<div id=\"editor\" #editor class=\"monaco-editor editor\"></div>\n", styles: [".editor{width:100%;height:inherit;min-height:200px}\n"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.10", ngImport: i0, type: CodeEditorComponent, decorators: [{
            type: Component,
            args: [{ selector: 'ngs-code-editor', standalone: true, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, host: { class: 'ngs-code-editor' }, template: "<div id=\"editor\" #editor class=\"monaco-editor editor\"></div>\n", styles: [".editor{width:100%;height:inherit;min-height:200px}\n"] }]
        }], propDecorators: { editorContent: [{
                type: ViewChild,
                args: ['editor', { static: true }]
            }], codeModel: [{
                type: Input
            }], theme: [{
                type: Input
            }], options: [{
                type: Input
            }], readOnly: [{
                type: Input
            }], valueChanged: [{
                type: Output
            }], codeModelChanged: [{
                type: Output
            }], modelContentChanged: [{
                type: Output
            }], loaded: [{
                type: Output
            }], onResize: [{
                type: HostListener,
                args: ['window:resize']
            }] } });
//# sourceMappingURL=data:application/json;base64,